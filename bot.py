import os
import random
import asyncio
from datetime import datetime, timedelta, timezone
import hashlib
import pytz
import discord
import json
from zoneinfo import ZoneInfo  # Python 3.11+


# ------------- CONFIG -------------

import os
TOKEN = os.getenv("DISCORD_TOKEN", "")
if not TOKEN:
    print("‚ùå DISCORD_TOKEN manquant (variable d'environnement).")

CHANNEL_LOG = 1408261120925634610
CHANNEL_SAISON = 1408264960714211348
CHANNEL_METEO = 1407922710855684166

intents = discord.Intents.default()
client = discord.Client(intents=intents)

PARIS_TZ = ZoneInfo("Europe/Paris")

# ------------- CALCULE DES SAISONS -------------


# ================== SAISONS PAR CONTINENT (messages auto) ==================


# Moyenne des fuseaux par rapport √† l'UTC (heures, minutes)
CONTINENT_OFFSETS = {
    "Europe":   ( +2,  0),
    "Afrique":  ( +1, 30),
    "Am√©rique": ( -6, -30),
    "Asie":     ( +7,  0),
    "Oc√©anie":  ( +4, 15),
}

SEASON_EMOJI = {"Hiver":"‚ùÑÔ∏è","Printemps":"üå±","√ât√©":"‚òÄÔ∏è","Automne":"üçÇ"}

def season_from_day(day: int) -> str:
    # 1‚Äì8 : Hiver ; 9‚Äì15 : Printemps ; 16‚Äì23 : √ât√© ; 24‚Äì31 : Automne
    if 1 <= day <= 8:     return "Hiver"
    if 9 <= day <= 15:    return "Printemps"
    if 16 <= day <= 23:   return "√ât√©"
    return "Automne"

def utc_now():
    return datetime.now(timezone.utc)

def apply_offset_utc(dt_utc: datetime, h: int, m: int) -> datetime:
    return dt_utc + timedelta(hours=h, minutes=m)

def to_paris(dt: datetime) -> datetime:
    # convertit n‚Äôimporte quel datetime aware en Europe/Paris
    return dt.astimezone(PARIS_TZ)

def unix(dt: datetime) -> int:
    """Retourne l'epoch (secondes) pour un datetime aware."""
    return int(dt.timestamp())

CONFIG_FILE = "season_state.json"
# structure: {"messages": {continent: message_id}, "last_season": {continent: "√ât√©"}}
def load_state():
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"messages":{}, "last_season":{}}

def save_state(state: dict):
    try:
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("‚ö†Ô∏è save_state:", e)

def _next_season_boundary_local(local_dt: datetime) -> datetime:
    """Renvoie le d√©but (00:00 local approx) du prochain jour-seuil : 9, 16, 24, 1."""
    base_midnight = local_dt.replace(hour=0, minute=0, second=0, microsecond=0)
    d = local_dt.day
    if d <= 8:
        return base_midnight.replace(day=9)
    elif d <= 15:
        return base_midnight.replace(day=16)
    elif d <= 23:
        return base_midnight.replace(day=24)
    else:
        year = base_midnight.year + (1 if base_midnight.month == 12 else 0)
        month = 1 if base_midnight.month == 12 else base_midnight.month + 1
        return base_midnight.replace(year=year, month=month, day=1)

state = load_state()

def build_continent_embed(continent: str, local_dt: datetime, season: str) -> discord.Embed:
    titre = f"{continent} ‚Äî Saison actuelle"
    desc  = f"{SEASON_EMOJI[season]} **{season}**\n"
    desc += f"_Date locale de r√©f√©rence :_ **{local_dt.strftime('%d %b %Y')}**"
    emb = discord.Embed(title=titre, description=desc, color=discord.Color.orange())

    # --- Footer en heure de Paris ---
    # 1) ‚ÄúDerni√®re v√©rif‚Äù = maintenant (Paris)
    now_paris = to_paris(utc_now())

    # 2) ‚ÄúProchaine transition‚Äù = prochain seuil local (minuit local approx) converti en Paris
    #    On dispose de local_dt = utc_now() + offset ; donc:
    #    a) calcule le prochain minuit local approx
    next_local_midnight = _next_season_boundary_local(local_dt)
    #    b) reviens en UTC (en retirant l‚Äôoffset du continent)
    h, m = CONTINENT_OFFSETS[continent]
    next_boundary_utc = (next_local_midnight - timedelta(hours=h, minutes=m)).replace(tzinfo=timezone.utc)
    #    c) convertis pour affichage Paris
    next_boundary_paris = to_paris(next_boundary_utc)

    emb.set_footer(
        text=f"Derni√®re v√©rif : <t:{unix(now_paris)}:f> ‚Ä¢ Prochaine transition : <t:{unix(next_boundary_paris)}:R>"
    )
    return emb

async def ensure_continent_messages():
    """Cr√©e (ou r√©cup√®re) 1 message par continent dans CHANNEL_SAISON et m√©morise leur ID."""
    saison_channel = client.get_channel(CHANNEL_SAISON) or await client.fetch_channel(CHANNEL_SAISON)
    for cont, (h, m) in CONTINENT_OFFSETS.items():
        msg_id = state["messages"].get(cont)
        now_utc = datetime.utcnow()
        local_dt = apply_offset_utc(now_utc, h, m)
        season = season_from_day(local_dt.day)
        emb = build_continent_embed(cont, local_dt, season)

        if msg_id:
            # v√©rifier que le message existe encore
            try:
                msg = await saison_channel.fetch_message(msg_id)
                # on met d√©j√† √† jour pour √™tre s√ªr que le contenu est correct
                await msg.edit(embed=emb)
                state["last_season"][cont] = season
                continue
            except Exception:
                # message supprim√© ‚Üí on recr√©e
                pass

        # cr√©er un nouveau message et m√©moriser l'ID
        new_msg = await saison_channel.send(embed=emb)
        state["messages"][cont] = new_msg.id
        state["last_season"][cont] = season

    save_state(state)
    print("‚úÖ Messages saison par continent pr√™ts.")

async def update_continent_messages_if_needed():
    """Toutes les quelques minutes : recalcule la saison locale de chaque continent.
       Si changement ‚Üí √©dite le message correspondant uniquement pour ce continent."""
    saison_channel = client.get_channel(CHANNEL_SAISON) or await client.fetch_channel(CHANNEL_SAISON)
    for cont, (h, m) in CONTINENT_OFFSETS.items():
        msg_id = state["messages"].get(cont)
        if not msg_id:
            continue
        try:
            msg = await saison_channel.fetch_message(msg_id)
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de fetch le message {cont}: {e}")
            continue

        now_utc = datetime.utcnow()
        local_dt = apply_offset_utc(now_utc, h, m)
        season = season_from_day(local_dt.day)
        last = state["last_season"].get(cont)

        if season != last:
            emb = build_continent_embed(cont, local_dt, season)
            try:
                await msg.edit(embed=emb)
                state["last_season"][cont] = season
                save_state(state)
                print(f"üîÑ Saison mise √† jour pour {cont} ‚Üí {season}")
            except Exception as e:
                print(f"‚ùå Edition √©chou√©e pour {cont}: {e}")

async def season_scheduler_loop():
    """Boucle l√©g√®re qui v√©rifie p√©riodiquement (toutes les 10 minutes)."""
    await client.wait_until_ready()
    # s'assure que les messages existent au d√©marrage
    await ensure_continent_messages()

    while not client.is_closed():
        try:
            await update_continent_messages_if_needed()
        except Exception as e:
            print("‚ö†Ô∏è season_scheduler_loop:", e)
        # on v√©rifie toutes les 10 minutes (suffisant pour d√©tecter un changement de jour)
        await asyncio.sleep(600)

# ====================== METEO QUOTIDIENNE PAR CONTINENT / BIOMES ======================
# Ce module s'auto-enregistre : AUCUNE modif ailleurs. Il ajoute son listener on_ready.
# Il cr√©e 5 messages (1/continent) dans CHANNEL_METEO et les met √† jour chaque jour
# √† minuit local du continent (offset moyen). Temp√©ratures = moyennes N-1 + lissage
# aux bornes de saison (crossfade) + petite variabilit√© quotidienne.

import json as _wxjson
import random as _wxrand
from datetime import datetime as _dt, timedelta as _td

# ---- s√©curit√©s : r√©cup√©rer objets existants ou d√©finir fallback ----
try:
    _client = client
except NameError:
    import discord as _discord
    _client = _discord.Client(intents=_discord.Intents.default())

try:
    _CH_METEO = CHANNEL_METEO
except NameError:
    _CH_METEO = None  # doit √™tre d√©fini dans ton code

try:
    _CH_LOG = CHANNEL_LOG
except NameError:
    _CH_LOG = None

# Offsets moyens continents (UTC) ‚Äî on r√©utilise si d√©j√† pr√©sents
try:
    _CONT_OFFSETS = CONTINENT_OFFSETS
except NameError:
    _CONT_OFFSETS = {
        "Europe":   ( +2,  0),
        "Afrique":  ( +1, 30),
        "Am√©rique": ( -6, -30),
        "Asie":     ( +7,  0),
        "Oc√©anie":  ( +4, 15),
    }

# D√©coupage saison ‚Äî on r√©utilise si d√©j√† pr√©sent
try:
    _season_from_day = season_from_day
except NameError:
    def _season_from_day(day: int) -> str:
        if 1 <= day <= 8:   return "Hiver"
        if 9 <= day <= 15:  return "Printemps"
        if 16 <= day <= 23: return "√ât√©"
        return "Automne"

# ---- biomes par continent (selon ta liste) ----
_BIOMES = {
    "Afrique": ["üåæ Zones Savanes", "üåµ Zones Deserts", "ü¶ú Zones Tropicales", "üå± Zones Mar√©cageuses", "üèôÔ∏è Zones Urbaines"],
    "Asie": ["ü¶ú Zones Tropicales", "üåæ Zones Prairies", "‚õ∞Ô∏è Zones Montagneuses", "‚ùÑÔ∏è Zones Enneig√©es", "üå≥ Zones Foresti√®res", "üèôÔ∏è Zones Urbaines"],
    "Am√©rique": ["üå≥ Zones Foresti√®res", "üåæ Zones Clairi√®re", "üåµ Zones Deserts", "‚õ∞Ô∏è Zones Montagneuses", "‚ùÑÔ∏è Zones Enneig√©es", "ü¶ú Zones Tropicales", "üå± Zones Mangroves", "üèôÔ∏è Zones Urbaines"],
    "Europe": ["üå≥ Zones Foresti√®res", "‚õ∞Ô∏è Zones Montagneuses", "‚ùÑÔ∏è Zones Enneig√©es", "üåæ Zones Prairies", "üèôÔ∏è Zones Urbaines"],
    "Oc√©anie": ["üå¥ Zones Insulaires", "üåæ Zones Savanes", "ü¶ú Zones Tropicales", "üåµ Zones Deserts", "‚õ∞Ô∏è Zones Montagneuses", "üèôÔ∏è Zones Urbaines"],
}

# ---- temp√©ratures moyennes N-1 par (continent, "nom biome abr√©g√©", saison) ----
# On utilise une cl√© "abr√©g√©e" pour matcher facilement : ex. "Savanes", "Deserts", "Tropicales", etc.
# Tu peux ajuster ces valeurs plus tard si besoin.
_N1 = {
    # Afrique
    ("Afrique","Savanes","Hiver"):24, ("Afrique","Savanes","Printemps"):26, ("Afrique","Savanes","√ât√©"):27, ("Afrique","Savanes","Automne"):25,
    ("Afrique","Deserts","Hiver"):20, ("Afrique","Deserts","Printemps"):30, ("Afrique","Deserts","√ât√©"):38, ("Afrique","Deserts","Automne"):28,
    ("Afrique","Tropicales","Hiver"):27, ("Afrique","Tropicales","Printemps"):28, ("Afrique","Tropicales","√ât√©"):28, ("Afrique","Tropicales","Automne"):27,
    ("Afrique","Mar√©cageuses","Hiver"):25, ("Afrique","Mar√©cageuses","Printemps"):26, ("Afrique","Mar√©cageuses","√ât√©"):26, ("Afrique","Mar√©cageuses","Automne"):25,
    ("Afrique","Urbaines","Hiver"):26, ("Afrique","Urbaines","Printemps"):28, ("Afrique","Urbaines","√ât√©"):29, ("Afrique","Urbaines","Automne"):27,

    # Asie
    ("Asie","Tropicales","Hiver"):26, ("Asie","Tropicales","Printemps"):28, ("Asie","Tropicales","√ât√©"):29, ("Asie","Tropicales","Automne"):27,
    ("Asie","Prairies","Hiver"):5,  ("Asie","Prairies","Printemps"):15, ("Asie","Prairies","√ât√©"):24, ("Asie","Prairies","Automne"):14,
    ("Asie","Montagneuses","Hiver"):-2, ("Asie","Montagneuses","Printemps"):6, ("Asie","Montagneuses","√ât√©"):12, ("Asie","Montagneuses","Automne"):4,
    ("Asie","Enneig√©es","Hiver"):-10, ("Asie","Enneig√©es","Printemps"):0, ("Asie","Enneig√©es","√ât√©"):8, ("Asie","Enneig√©es","Automne"):-2,
    ("Asie","Foresti√®res","Hiver"):2, ("Asie","Foresti√®res","Printemps"):12, ("Asie","Foresti√®res","√ât√©"):20, ("Asie","Foresti√®res","Automne"):10,
    ("Asie","Urbaines","Hiver"):3, ("Asie","Urbaines","Printemps"):14, ("Asie","Urbaines","√ât√©"):23, ("Asie","Urbaines","Automne"):12,

    # Am√©rique
    ("Am√©rique","Foresti√®res","Hiver"):0, ("Am√©rique","Foresti√®res","Printemps"):10, ("Am√©rique","Foresti√®res","√ât√©"):20, ("Am√©rique","Foresti√®res","Automne"):9,
    ("Am√©rique","Clairi√®re","Hiver"):-2, ("Am√©rique","Clairi√®re","Printemps"):12, ("Am√©rique","Clairi√®re","√ât√©"):24, ("Am√©rique","Clairi√®re","Automne"):10,
    ("Am√©rique","Deserts","Hiver"):10, ("Am√©rique","Deserts","Printemps"):25, ("Am√©rique","Deserts","√ât√©"):35, ("Am√©rique","Deserts","Automne"):20,
    ("Am√©rique","Montagneuses","Hiver"):-5, ("Am√©rique","Montagneuses","Printemps"):5, ("Am√©rique","Montagneuses","√ât√©"):12, ("Am√©rique","Montagneuses","Automne"):3,
    ("Am√©rique","Enneig√©es","Hiver"):-15, ("Am√©rique","Enneig√©es","Printemps"):-2, ("Am√©rique","Enneig√©es","√ât√©"):8, ("Am√©rique","Enneig√©es","Automne"):-5,
    ("Am√©rique","Tropicales","Hiver"):25, ("Am√©rique","Tropicales","Printemps"):27, ("Am√©rique","Tropicales","√ât√©"):28, ("Am√©rique","Tropicales","Automne"):26,
    ("Am√©rique","Mangroves","Hiver"):26, ("Am√©rique","Mangroves","Printemps"):27, ("Am√©rique","Mangroves","√ât√©"):27, ("Am√©rique","Mangroves","Automne"):26,
    ("Am√©rique","Urbaines","Hiver"):1, ("Am√©rique","Urbaines","Printemps"):12, ("Am√©rique","Urbaines","√ât√©"):22, ("Am√©rique","Urbaines","Automne"):11,

    # Europe
    ("Europe","Foresti√®res","Hiver"):2, ("Europe","Foresti√®res","Printemps"):13, ("Europe","Foresti√®res","√ât√©"):19, ("Europe","Foresti√®res","Automne"):9,
    ("Europe","Montagneuses","Hiver"):-4, ("Europe","Montagneuses","Printemps"):5, ("Europe","Montagneuses","√ât√©"):12, ("Europe","Montagneuses","Automne"):3,
    ("Europe","Enneig√©es","Hiver"):-10, ("Europe","Enneig√©es","Printemps"):1, ("Europe","Enneig√©es","√ât√©"):10, ("Europe","Enneig√©es","Automne"):0,
    ("Europe","Prairies","Hiver"):1, ("Europe","Prairies","Printemps"):12, ("Europe","Prairies","√ât√©"):22, ("Europe","Prairies","Automne"):10,
    ("Europe","Urbaines","Hiver"):3, ("Europe","Urbaines","Printemps"):14, ("Europe","Urbaines","√ât√©"):23, ("Europe","Urbaines","Automne"):11,

    # Oc√©anie
    ("Oc√©anie","Insulaires","Hiver"):18, ("Oc√©anie","Insulaires","Printemps"):22, ("Oc√©anie","Insulaires","√ât√©"):26, ("Oc√©anie","Insulaires","Automne"):22,
    ("Oc√©anie","Savanes","Hiver"):22, ("Oc√©anie","Savanes","Printemps"):26, ("Oc√©anie","Savanes","√ât√©"):30, ("Oc√©anie","Savanes","Automne"):24,
    ("Oc√©anie","Tropicales","Hiver"):26, ("Oc√©anie","Tropicales","Printemps"):27, ("Oc√©anie","Tropicales","√ât√©"):28, ("Oc√©anie","Tropicales","Automne"):27,
    ("Oc√©anie","Deserts","Hiver"):18, ("Oc√©anie","Deserts","Printemps"):28, ("Oc√©anie","Deserts","√ât√©"):36, ("Oc√©anie","Deserts","Automne"):24,
    ("Oc√©anie","Montagneuses","Hiver"):5, ("Oc√©anie","Montagneuses","Printemps"):10, ("Oc√©anie","Montagneuses","√ât√©"):16, ("Oc√©anie","Montagneuses","Automne"):8,
    ("Oc√©anie","Urbaines","Hiver"):19, ("Oc√©anie","Urbaines","Printemps"):23, ("Oc√©anie","Urbaines","√ât√©"):27, ("Oc√©anie","Urbaines","Automne"):23,
}

# map emoji -> description courte
_EMOJI_DESC = {
    "‚òÄÔ∏è":"Ciel d√©gag√©, chaleur marqu√©e",
    "üå§Ô∏è":"Soleil dominant, quelques nuages",
    "‚õÖ":"Partiellement nuageux",
    "üå•Ô∏è":"Nuages √©pais majoritaires",
    "üå¶Ô∏è":"√âclaircies et averses",
    "üåßÔ∏è":"Averses fr√©quentes",
    "üå®Ô∏è":"Neige",
    "üå©Ô∏è":"Orage sec",
    "‚õàÔ∏è":"Orage et pluie",
    "üå™Ô∏è":"Vents violents, tornades possibles",
    "üå´Ô∏è":"Brouillard √©pais",
    "üí®":"Vent fort",
}

# choix de l'emoji selon biome/saison/temp (1 seul)
def _pick_emoji(continent: str, biome_name: str, season: str, temp_c: float) -> str:
    b = biome_name.lower()
    # froid franc
    if temp_c <= 0 or ("enneig" in b and season in ("Hiver","Automne")) or ("montagne" in b and season == "Hiver"):
        return "üå®Ô∏è"
    # d√©sert / int√©rieur sec
    if "d√©sert" in b or "desert" in b:
        return "‚òÄÔ∏è" if season in ("Printemps","√ât√©") else "üí®"
    # tropical / mangrove / mousson
    if "tropic" in b or "mangrove" in b:
        return "‚õàÔ∏è" if season in ("Printemps","√ât√©") else "üåßÔ∏è"
    # mar√©cage
    if "mar√©c" in b or "marec" in b:
        return "üå¶Ô∏è"
    # urbain
    if "urbain" in b or "urbaines" in b:
        return "üå•Ô∏è" if season in ("Hiver","Automne") else "‚õÖ"
    # montagne
    if "montagne" in b:
        return "üå•Ô∏è" if season != "Hiver" else "üå®Ô∏è"
    # for√™ts / prairies / clairi√®res / insulaires / savanes
    if "for√™t" in b or "foresti" in b or "prairie" in b or "clairi√®re" in b or "insulaire" in b or "savane" in b:
        if season == "√ât√©":
            return "‚òÄÔ∏è" if temp_c >= 24 else "‚õÖ"
        if season == "Printemps":
            return "üå§Ô∏è"
        if season == "Automne":
            return "üå•Ô∏è"
        return "üå´Ô∏è" if temp_c <= 3 else "‚õÖ"
    # d√©faut
    return "‚õÖ"

# lissage autour des bornes (8‚Üî9, 15‚Üî16, 23‚Üî24, 31‚Üî1)
def _next_season(season: str) -> str:
    order = ["Hiver","Printemps","√ât√©","Automne"]
    return order[(order.index(season)+1) % 4]

def _blend_factor(day: int) -> float:
    # Renvoie alpha (0..1) vers saison suivante selon jour de mois
    if day in (8, 31):
        return 0.2
    if day in (9, 1):
        return 0.8
    if day == 15:
        return 0.2
    if day == 16:
        return 0.8
    if day == 23:
        return 0.2
    if day == 24:
        return 0.8
    return 0.0

def _abbr(biome_display: str) -> str:
    # "üå≥ Zones Foresti√®res" -> "Foresti√®res"
    return biome_display.split(" ", 1)[1].replace("Zones ","").strip()

def _local_dt_for(continent: str) -> _dt:
    h, m = _CONT_OFFSETS[continent]
    return _dt.utcnow() + _td(hours=h, minutes=m)

def _build_embed(continent: str):
    import discord as _discord
    local = _local_dt_for(continent)  # aware
    day = local.day
    season = _season_from_day(day)
    alpha = _blend_factor(day)
    season_next = _next_season(season)

    title = f"{'ü¶Å' if continent=='Afrique' else 'üêº' if continent=='Asie' else 'üêøÔ∏è' if continent=='Am√©rique' else 'üê∫' if continent=='Europe' else 'üêπ'} {continent} ‚Äî M√©t√©o r√©gionale"
    emb = _discord.Embed(title=title, color=_discord.Color.blue())

    # ----- Footer en heure de Paris -----
    # Derni√®re v√©rif = maintenant Paris
    now_paris = to_paris(utc_now())

    # Prochaine m√©t√©o = prochain minuit "local" du continent ‚Üí converti en Paris
    # local_midnight = 00:00 du jour local approx
    local_midnight = local.replace(hour=0, minute=0, second=0, microsecond=0)
    next_local_midnight = local_midnight + timedelta(days=1)
    # repasse en UTC en retirant l‚Äôoffset continent
    h, m = _CONT_OFFSETS[continent]
    next_midnight_utc = (next_local_midnight - timedelta(hours=h, minutes=m)).replace(tzinfo=timezone.utc)
    # affiche en Paris
    next_midnight_paris = to_paris(next_midnight_utc)

    emb.set_footer(
        text=f"Derni√®re v√©rif : <t:{unix(now_paris)}:f> ‚Ä¢ Prochaine m√©t√©o : <t:{unix(next_midnight_paris)}:R> ‚Ä¢ Saison : {season}"
    )

    fields = []
    # ... (le reste de ta construction des champs ne change pas)
    for biome_disp in _BIOMES[continent]:
        short = _abbr(biome_disp)
        base_cur = _N1.get((continent, short, season))
        base_next = _N1.get((continent, short, season_next))
        if base_cur is None or base_next is None:
            continue

        t = (1 - alpha) * base_cur + alpha * base_next
        t += _wxrand.randint(-2, 2)
        t_rounded = int(round(t))

        emoji = _pick_emoji(continent, short, season, t_rounded)
        desc = _EMOJI_DESC.get(emoji, "")
        fields.append((short, t_rounded, emoji))

        value = f"üå°Ô∏è **{t_rounded} ¬∞C**\nM√©t√©o : {emoji}\n*({desc})*"
        emb.add_field(name=biome_disp, value=value, inline=True)

    return emb, local, fields

# ---- persistance des messages et du dernier jour local ----
_WX_STATE_FILE = "meteo_daily_state.json"
def _load_state():
    try:
        with open(_WX_STATE_FILE, "r", encoding="utf-8") as f:
            return _wxjson.load(f)
    except Exception:
        return {"messages":{}, "last_date":{}}  # last_date[continent] = "YYYYMMDD"

def _save_state(st):
    try:
        with open(_WX_STATE_FILE, "w", encoding="utf-8") as f:
            _wxjson.dump(st, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("‚ö†Ô∏è save meteo state:", e)

_wx_state = _load_state()

async def _ensure_meteo_messages():
    # cr√©e/rafra√Æchit 1 message par continent dans CHANNEL_METEO
    ch = _client.get_channel(_CH_METEO) or await _client.fetch_channel(_CH_METEO)
    for cont in _BIOMES.keys():
        emb = _build_embed(cont)
        msg_id = _wx_state["messages"].get(cont)
        if msg_id:
            try:
                msg = await ch.fetch_message(msg_id)
                await msg.edit(embed=emb)
            except Exception:
                new_msg = await ch.send(embed=emb)
                _wx_state["messages"][cont] = new_msg.id
        else:
            new_msg = await ch.send(embed=emb)
            _wx_state["messages"][cont] = new_msg.id

        local = _local_dt_for(cont)
        _wx_state["last_date"][cont] = local.strftime("%Y%m%d")

    _save_state(_wx_state)
    print("‚úÖ M√©t√©o: messages par continent pr√™ts/rafra√Æchis.")

async def _update_meteo_if_needed():
    ch = _client.get_channel(_CH_METEO) or await _client.fetch_channel(_CH_METEO)
    for cont in _BIOMES.keys():
        local = _local_dt_for(cont)
        code = local.strftime("%Y%m%d")
        if _wx_state["last_date"].get(cont) != code:
            # nouveau jour local ‚Üí reg√©n√©rer l'embed et √©diter
            emb = _build_embed(cont)
            msg_id = _wx_state["messages"].get(cont)
            if msg_id:
                try:
                    msg = await ch.fetch_message(msg_id)
                    await msg.edit(embed=emb)
                except Exception:
                    new_msg = await ch.send(embed=emb)
                    _wx_state["messages"][cont] = new_msg.id
            else:
                new_msg = await ch.send(embed=emb)
                _wx_state["messages"][cont] = new_msg.id
            _wx_state["last_date"][cont] = code
            _save_state(_wx_state)
            print(f"üîÑ M√©t√©o mise √† jour ({cont}) pour la date locale {code}.")

async def _meteo_daily_scheduler():
    await _client.wait_until_ready()
    # s√©curit√© : channel obligatoire
    if not _CH_METEO:
        print("‚ùå CHANNEL_METEO n'est pas d√©fini.")
        return
    try:
        await _ensure_meteo_messages()
    except Exception as e:
        print(f"‚ö†Ô∏è init m√©t√©o: {e}")
    while not _client.is_closed():
        try:
            await _update_meteo_if_needed()
        except Exception as e:
            print("‚ö†Ô∏è boucle m√©t√©o:", e)
        # on v√©rifie toutes les 10 minutes; √ßa suffit pour capter minuit local
        await asyncio.sleep(600)

# ==================== FIN MODULE METEO ====================

@client.event
async def on_ready():
    print(f"‚úÖ Connect√© comme {client.user} (ID: {client.user.id})")

    # --- LOG D√âMARRAGE ---
    log_ch = client.get_channel(CHANNEL_LOG)
    if log_ch is None:
        try:
            log_ch = await client.fetch_channel(CHANNEL_LOG)
        except Exception as e:
            print(f"‚ö†Ô∏è Log: impossible de r√©cup√©rer CHANNEL_LOG ({CHANNEL_LOG}) : {e}")
            log_ch = None
    if log_ch:
        try:
            await log_ch.send("‚úÖ Bot op√©rationnel (connexion r√©ussie).")
        except Exception as e:
            print(f"‚ö†Ô∏è Log: envoi impossible : {e}")

    # --- INIT SAISONS (cr√©e/rafra√Æchit 1 msg par continent) ---
    try:
        await ensure_continent_messages()   # vient de ton module saisons
    except NameError:
        print("‚ÑπÔ∏è ensure_continent_messages() non d√©fini (module saisons absent).")
    except Exception as e:
        print(f"‚ö†Ô∏è init saisons: {e}")

    # --- LANCER LA BOUCLE SAISONS ---
    try:
        client.loop.create_task(season_scheduler_loop())
    except NameError:
        print("‚ÑπÔ∏è season_scheduler_loop() non d√©fini (module saisons absent).")
    except Exception as e:
        print(f"‚ö†Ô∏è start scheduler saisons: {e}")

    # --- INIT METEO (cr√©e/rafra√Æchit 1 msg M√âT√âO par continent) ---
    try:
        await _ensure_meteo_messages()      # vient du module m√©t√©o quotidien
    except NameError:
        print("‚ÑπÔ∏è _ensure_meteo_messages() non d√©fini (module m√©t√©o absent).")
    except Exception as e:
        print(f"‚ö†Ô∏è init m√©t√©o: {e}")

    # --- LANCER LA BOUCLE METEO QUOTIDIENNE ---
    try:
        client.loop.create_task(_meteo_daily_scheduler())
    except NameError:
        print("‚ÑπÔ∏è _meteo_daily_scheduler() non d√©fini (module m√©t√©o absent).")
    except Exception as e:
        print(f"‚ö†Ô∏è start scheduler m√©t√©o: {e}")


# D√âMARRAGE DU BOT  ‚¨áÔ∏è  (indispensable)
if __name__ == "__main__":
    client.run(TOKEN)
